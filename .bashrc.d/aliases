sshps1() {
  ssh -o "StrictHostKeyChecking=no" -A -t $1 "bash --rcfile <(echo '. ~/.bashrc ; PS1=\"\n\[\$(tput setaf 1)\]$(printf "\xE2\x94\x8C")[\u@\h]-[\t]\n\[\$(tput setaf 1)\]$(printf "\xE2\x94\x94")[\w]\\$\[$(tput sgr0)\] \" ; HISTSIZE=10000 ; HISTFILESIZE=10000 ; shopt -s histappend ; export HISTCONTROL=ignorespace:ignoredups:erasedups ; PROMPT_COMMAND=\"history -a\"')"
}
alias s='ssh -o "StrictHostKeyChecking=no" -A'
alias ll="ls -lh"
unalias l &> /dev/null
l() {
  local s=${1:-./}
  local enc=`file --mime-encoding $s | cut -d: -f2 | xargs`
  if [[ $enc == "binary" ]] || [[ $enc == "ERROR" ]]; then
    ls -lah --color=always $1 | less -R
  else
    less $1
  fi
}
alias gitpall="find ~/git/* ~/git/ansible-roles/* -maxdepth 0 -type d | xargs -P 6 -I{} sh -c \"git -C {} pull -v\""
hgrep() {
  grep -i "$1" `find ~/git/ -type f -name hosts` | grep "\..*\." | sed 's/:/~/' | awk -F"~" '{print $2"\t"$1}' | grep -v "${HOME}/git/tmp"  | grep -v "^#" | grep -v "^;" | column -t
}
hfzf() {
  grep "\..*\." `find ~/git/ -type f -name hosts` | sed 's/[: ]/~/g' | grep -v ~# | awk -F"~" '{print $2"\t"$1}' | column -t | fzf
}
alias genpwd="openssl rand -base64 25 | sed 's/[\/+=]//g' | cut -c 2-19"
alias genpwdv='ansible-vault encrypt_string --vault-password-file ~/.vault-pass $(genpwd) 2> /dev/null'
vdecr() {
  unset IFS
  # if we have an argument, check wether it is a file.
  if [[ -n "$1" ]]; then
    if [[ -f "$1" ]]; then
      # if argument is a file check if it is fully encrypted file and cat it to decrypt
      if [[ $(head -n1 "$1") == "\$ANSIBLE_VAULT;1.1;AES256" ]]; then
        cat "$1" | ansible-vault decrypt --vault-password-file ~/.vault-pass 2> /dev/null
        return 0
      fi
      # if argument is a file, but not fully encrypted, parse vault vaules from it
      printf 'Reading vault values from file...\n\n'
      local parsing=0
      local result=""
      local name=""
      for line in $(cat $1); do 
        if [[ $(echo "$line" | grep -c "\!vault") -gt 0 ]] && [[ $parsing -eq 0 ]]; then
          parsing=1
        elif [[ $parsing -eq 1 ]] && [[ $( echo $line | grep -c ":") -eq 0 ]]; then
          result=$(printf "${result}\n${line}")
        else
          if [[ $result != "" ]]; then
            printf "\n\n$(tput setaf 4)$name$(tput sgr0)\n"
            printf "$result" | vdecr
            name=""
            result=""
            parsing=0
          fi
  	    fi
        if  [[ $( echo "$line" | grep -c ":") -eq 1 ]]; then
          name="$line"
        fi
      done
      return 0
    fi
    # if argumnent is not a file, just set variable
    local str="$1"
  # if STDIN is not terminal, read from STDIN
  elif [[ ! -t 0 ]]; then
    local str=$(cat)
  # if STDIN is a terminal, print message and read from STDIN
  else
    printf 'Interactive mode. Paste encrypted string and press Ctrl-D two times to confirm.\n'
    local str=$(cat)
    printf '\n'
  fi
  # dedrypt var.
  # newlines may get squashed, so replace all spaces with newlines
  # remove ---, var name, !vault, | and empty lines
  printf -- "$str" | sed 's/ /\n/g' | \
  sed '/---\|^.*:\|\!vault\||\|^$/d' | \
  ansible-vault decrypt --vault-password-file ~/.vault-pass 2> /dev/null #| \
#  tail -n1
  printf '\n'
}
alias ap="ansible-playbook --diff --ask-become-pass --vault-password-file ~/.vault-pass --forks $(nproc)"
alias ac="ANSIBLE_STDOUT_CALLBACK=default ansible-console --ask-become-pass --vault-password-file ~/.vault-pass --forks $(nproc)"
av() {
  local vault_pass_file="~/.vault-pass"
  local inventory_dir="inventory"
  local hosts_file="hosts"
  local clr1=$(tput setaf 3)
  local clr2=$(tput setaf 2)
  local rst=$(tput sgr0)
  ansible-variables -v --playbook-dir=. --vault-pass-file $vault_pass_file \
   -i $inventory_dir/$1*/$hosts_file $2 2> /dev/null | \
   pcregrep -M "^$3.*\n(.*\n)*?.*/\*\n/.*y[a]*ml(\n/.*)*" | \
   sed -r "s:^(/.*):  $clr1 \xF0\x9F\x93\x82 \1$rst:" | \
   sed -r "s/^([a-z0-9\-_]+):/$clr2\1$rst:/"
}
